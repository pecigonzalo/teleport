/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter long_type_number,eslint_disable,add_pb_suffix,client_grpc1,server_grpc1,ts_nocheck
// @generated from protobuf file "ptyHostService.proto" (syntax proto3)
// tslint:disable
// @ts-nocheck
//
//
// Teleport
// Copyright (C) 2023  Gravitational, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//
// TODO(ravicious): Before introducing any changes, move this file to the /proto dir and
// remove the generate-grpc-shared script.
//
import { PtyCwd } from "./ptyHostService_pb";
import { PtyServerEvent } from "./ptyHostService_pb";
import { PtyClientEvent } from "./ptyHostService_pb";
import { PtyId } from "./ptyHostService_pb";
import { PtyCreate } from "./ptyHostService_pb";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service PtyHost
 */
export interface IPtyHost extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: CreatePtyProcess(PtyCreate) returns (PtyId);
     */
    createPtyProcess: grpc.handleUnaryCall<PtyCreate, PtyId>;
    /**
     * @generated from protobuf rpc: ExchangeEvents(stream PtyClientEvent) returns (stream PtyServerEvent);
     */
    exchangeEvents: grpc.handleBidiStreamingCall<PtyClientEvent, PtyServerEvent>;
    /**
     * @generated from protobuf rpc: GetCwd(PtyId) returns (PtyCwd);
     */
    getCwd: grpc.handleUnaryCall<PtyId, PtyCwd>;
}
/**
 * @grpc/grpc-js definition for the protobuf service PtyHost.
 *
 * Usage: Implement the interface IPtyHost and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IPtyHost = ...
 * server.addService(ptyHostDefinition, service);
 * ```
 */
export const ptyHostDefinition: grpc.ServiceDefinition<IPtyHost> = {
    createPtyProcess: {
        path: "/PtyHost/CreatePtyProcess",
        originalName: "CreatePtyProcess",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => PtyId.fromBinary(bytes),
        requestDeserialize: bytes => PtyCreate.fromBinary(bytes),
        responseSerialize: value => Buffer.from(PtyId.toBinary(value)),
        requestSerialize: value => Buffer.from(PtyCreate.toBinary(value))
    },
    exchangeEvents: {
        path: "/PtyHost/ExchangeEvents",
        originalName: "ExchangeEvents",
        requestStream: true,
        responseStream: true,
        responseDeserialize: bytes => PtyServerEvent.fromBinary(bytes),
        requestDeserialize: bytes => PtyClientEvent.fromBinary(bytes),
        responseSerialize: value => Buffer.from(PtyServerEvent.toBinary(value)),
        requestSerialize: value => Buffer.from(PtyClientEvent.toBinary(value))
    },
    getCwd: {
        path: "/PtyHost/GetCwd",
        originalName: "GetCwd",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => PtyCwd.fromBinary(bytes),
        requestDeserialize: bytes => PtyId.fromBinary(bytes),
        responseSerialize: value => Buffer.from(PtyCwd.toBinary(value)),
        requestSerialize: value => Buffer.from(PtyId.toBinary(value))
    }
};
