/*
 * Teleport
 * Copyright (C) 2023  Gravitational, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package upgradewindow

import (
	"fmt"
	"strings"

	"github.com/gravitational/trace"

	"github.com/gravitational/teleport/api/types"
	"github.com/gravitational/teleport/lib/utils"
)

// EncodeKubeControllerSchedule converts an agent upgrade schedule to the file format
// expected by the kuberenets upgrade controller.
func EncodeKubeControllerSchedule(schedule types.AgentUpgradeSchedule) (string, error) {
	b, err := utils.FastMarshal(&schedule)
	if err != nil {
		return "", trace.Errorf("failed to encode kube controller schedule: %v", err)
	}

	return string(b), nil
}

// unitScheduleHeader is the first line in the systemd unit upgrader schedule. The teleport-upgrade
// script invoked by the unit ignores all lines starting with '# '.
const unitScheduleHeader = "# generated by teleport\n"

// EncodeSystemdUnitSchedule converts an agent upgrade schedule to the file format
// expected by the teleport-upgrade script.
func EncodeSystemdUnitSchedule(schedule types.AgentUpgradeSchedule) (string, error) {
	if len(schedule.Windows) == 0 {
		return "", trace.BadParameter("cannot encode empty schedule")
	}

	var builder strings.Builder
	builder.WriteString(unitScheduleHeader)
	for _, window := range schedule.Windows {
		// upgrade windows are encoded as a pair of space-separated unix timestamps.
		fmt.Fprintf(&builder, "%d %d\n", window.Start.Unix(), window.Stop.Unix())
	}

	return builder.String(), nil
}
